// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrackerEF.Data;

#nullable disable

namespace TrackerEF.Migrations
{
    [DbContext(typeof(TrackerContext))]
    [Migration("20241206115425_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrackerEF.Models.Asset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssetTrackerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.HasIndex("AssetTrackerId");

                    b.ToTable("Assets");

                    b.HasDiscriminator().HasValue("Asset");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TrackerEF.Models.AssetTracker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Trackers");
                });

            modelBuilder.Entity("TrackerEF.Models.Product", b =>
                {
                    b.HasBaseType("TrackerEF.Models.Asset");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<float>("PriceUSD")
                        .HasColumnType("real");

                    b.Property<DateTime>("PurchaceDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("TrackerEF.Models.Computer", b =>
                {
                    b.HasBaseType("TrackerEF.Models.Product");

                    b.HasDiscriminator().HasValue("Computer");
                });

            modelBuilder.Entity("TrackerEF.Models.Smartphone", b =>
                {
                    b.HasBaseType("TrackerEF.Models.Product");

                    b.HasDiscriminator().HasValue("Smartphone");
                });

            modelBuilder.Entity("TrackerEF.Models.Asset", b =>
                {
                    b.HasOne("TrackerEF.Models.AssetTracker", null)
                        .WithMany("Assets")
                        .HasForeignKey("AssetTrackerId");
                });

            modelBuilder.Entity("TrackerEF.Models.AssetTracker", b =>
                {
                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
